{"version":3,"sources":["components/Game/utils/classes/BaseGame.js","components/Game/utils/constants.js","components/Game/utils/assetsPaths/backgrounds.js","components/Game/scenes/boot.js","components/Game/scenes/splash.js","components/Game/Game.js","App.js","serviceWorker.js","index.js"],"names":["BaseGame","config","Phaser","Game","SceneKey","SceneBackgrounds","GREEN_LANDSCAPE","key","url","GREEN_PORTRAIT","BootScene","this","load","setBaseURL","arialRoundedFont","window","FontFace","then","loadedFont","document","fonts","add","catch","e","console","log","Object","values","forEach","image","on","scene","start","Scene","SplashScene","game","canvas","width","height","background","setOrigin","setDisplaySize","SimonGame","DPR","devicePixelRatio","backgroundColor","type","AUTO","scale","parent","mode","Scale","NONE","documentElement","clientHeight","clientWidth","zoom","resizeEvent","resizeGame","addEventListener","id","removeEventListener","resize","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"8NASeA,E,kDALX,WAAYC,GAAS,uCACXA,G,UAHSC,IAAOC,MCFjBC,EACH,YADGA,EAED,cCSGC,EAXU,CACrBC,gBAAgB,CACZC,IAAK,mBACLC,IAAK,+CAETC,eAAe,CACXF,IAAK,mBACLC,IAAK,+CCiBEE,E,kDAlBX,aAAe,uCACL,CAAEH,IAAKH,I,sDAGN,IAAD,OACNO,KAAKC,KAAKC,WAAW,oBAErBF,KAAKG,iBAAmB,IAAIC,OAAOC,SFRnB,gBEOC,4DAEjBL,KAAKG,iBAAiBF,OACjBK,MAAK,SAAAC,GAAU,OAAIC,SAASC,MAAMC,IAAIH,MACtCI,OAAM,SAACC,GAAD,OAAOC,QAAQC,IAAI,4BAA6BF,MAC3DG,OAAOC,OAAOtB,GAAkBuB,SAAQ,gBAAGrB,EAAH,EAAGA,IAAKC,EAAR,EAAQA,IAAR,OACpC,EAAKI,KAAKiB,MAAMtB,EAAKC,MACzBG,KAAKC,KAAKiB,MAAM,OAAQ,uBACxBlB,KAAKC,KAAKkB,GAAG,YAAY,kBAAM,EAAKC,MAAMC,MAAM5B,U,GAhBhCF,IAAO+B,OCgBhBC,E,kDAdX,aAAe,uCACL,CAAE3B,IAAKH,I,mDAGT,IAAD,EACuBO,KAAKwB,KAAKC,OAA5BC,EADL,EACKA,MAAOC,EADZ,EACYA,OACT/B,EAAMF,EAAiBC,gBAAgBC,IAC7CI,KAAK4B,WAAa5B,KAAKU,IAAIQ,MAAM,EAAG,EAAGtB,GAClCiC,UAAU,GACVC,eAAeJ,EAAOC,GAC3B3B,KAAKU,IAAIQ,MAAMQ,EAAQ,EAAGC,EAAS,EAAG,Y,GAZpBpC,IAAO+B,OC0ClBS,E,kLAtCU,IAAD,OACVC,EAAM5B,OAAO6B,iBACnBjC,KAAKwB,KAAO,IAAInC,EAAS,CACrB+B,MAAO,CAACrB,EAAWwB,GACnBW,gBAAiB,UACjBC,KAAM5C,IAAO6C,KACbC,MAAO,CACHC,OAAQ,cACRC,KAAMhD,IAAOiD,MAAMC,KACnBd,OAAQnB,SAASkC,gBAAgBC,aAAeX,EAChDN,MAAOlB,SAASkC,gBAAgBE,YAAcZ,EAC9Ca,KAAM,EAAIb,KAGlBhC,KAAK8C,YAAc,kBAAM,EAAKC,cAC9B3C,OAAO4C,iBAAiB,SAAUhD,KAAK8C,e,+BAIvC,OAAO,yBAAKG,GAAG,kB,8CAIf,OAAO,I,6CAIP7C,OAAO8C,oBAAoB,SAAUlD,KAAK8C,e,mCAI1C,IAAMd,EAAM5B,OAAO6B,iBADV,EAE6BzB,SAASkC,gBAAvCE,EAFC,EAEDA,YAAaD,EAFZ,EAEYA,aACrB3C,KAAKwB,KAAKa,MAAMc,OAAOP,EAAcZ,EAAKW,EAAeX,O,GAnCzCoB,aCCTC,MAJf,WACE,OAAO,kBAAC,EAAD,OCQWC,QACW,cAA7BlD,OAAOmD,SAASC,UAEe,UAA7BpD,OAAOmD,SAASC,UAEhBpD,OAAOmD,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFpD,SAASqD,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1D,MAAK,SAAA2D,GACJA,EAAaC,gBAEdvD,OAAM,SAAAwD,GACLtD,QAAQsD,MAAMA,EAAMC,a","file":"static/js/main.542204d1.chunk.js","sourcesContent":["import Phaser from 'phaser';\n\nclass BaseGame extends Phaser.Game {\n\n    constructor(config) {\n        super(config);\n    }\n}\n\nexport default BaseGame;","export const SceneKey = {\n    BOOT: 'bootScene',\n    SPLASH: 'splashScene'\n}\n\nexport const GameFont = 'SimonGameFont'","const SceneBackgrounds = {\n    GREEN_LANDSCAPE:{\n        key: 'greenLandscapeBG',\n        url: 'GameAssets/backgrounds/greenLandscapeBg.png'\n    },\n    GREEN_PORTRAIT:{\n        key: 'greenLandscapeBG',\n        url: 'GameAssets/backgrounds/greenPortraitBg.png'\n    }\n}\n\nexport default SceneBackgrounds;","import Phaser from 'phaser';\nimport { GameFont, SceneKey } from '../utils/constants';\nimport SceneBackgrounds from '../utils/assetsPaths/backgrounds';\n\nclass BootScene extends Phaser.Scene {\n\n    constructor() {\n        super({ key: SceneKey.BOOT })\n    }\n\n    preload() {\n        this.load.setBaseURL('./simon-phaserjs');\n        const fontPath = 'url(/simon-phaserjs/GameAssets/fonts/ArialRoundedMT.ttf)';\n        this.arialRoundedFont = new window.FontFace(GameFont, fontPath);\n        this.arialRoundedFont.load()\n            .then(loadedFont => document.fonts.add(loadedFont))\n            .catch((e) => console.log('error al cargar la fuente', e));\n        Object.values(SceneBackgrounds).forEach(({ key, url }) =>\n            this.load.image(key, url))\n        this.load.image('icon', 'GameAssets/icon.png');\n        this.load.on('complete', () => this.scene.start(SceneKey.SPLASH));\n    }\n}\n\nexport default BootScene;","import Phaser from 'phaser';\nimport { SceneKey } from '../utils/constants';\nimport SceneBackgrounds from '../utils/assetsPaths/backgrounds';\n\nclass SplashScene extends Phaser.Scene {\n\n    constructor() {\n        super({ key: SceneKey.SPLASH })\n    }\n\n    init() {\n        const { width, height } = this.game.canvas;\n        const key = SceneBackgrounds.GREEN_LANDSCAPE.key;\n        this.background = this.add.image(0, 0, key)\n            .setOrigin(0)\n            .setDisplaySize(width, height);\n        this.add.image(width / 2, height / 2, 'icon');\n    }\n}\n\nexport default SplashScene;","import React, { Component } from 'react';\nimport Phaser from 'phaser';\nimport BaseGame from './utils/classes/BaseGame'\nimport BootScene from './scenes/boot';\nimport SplashScene from './scenes/splash';\n\nclass SimonGame extends Component {\n\n    componentDidMount() {\n        const DPR = window.devicePixelRatio;\n        this.game = new BaseGame({\n            scene: [BootScene, SplashScene],\n            backgroundColor: '#000000',\n            type: Phaser.AUTO,\n            scale: {\n                parent: 'phaser-game',\n                mode: Phaser.Scale.NONE,\n                height: document.documentElement.clientHeight * DPR,\n                width: document.documentElement.clientWidth * DPR,\n                zoom: 1 / DPR\n            }\n        });\n        this.resizeEvent = () => this.resizeGame();\n        window.addEventListener('resize', this.resizeEvent);\n    }\n\n    render() {\n        return <div id=\"phaser-game\" />;\n    }\n\n    shouldComponentUpdate() {\n        return false;\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.resizeEvent);\n    }\n\n    resizeGame() {\n        const DPR = window.devicePixelRatio;\n        const { clientWidth, clientHeight } = document.documentElement;\n        this.game.scale.resize(clientWidth * DPR, clientHeight * DPR);\n    }\n\n}\n\nexport default SimonGame;","import React from 'react';\nimport SimonGame from './components/Game/Game';\n\nfunction App() {\n  return <SimonGame/>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}